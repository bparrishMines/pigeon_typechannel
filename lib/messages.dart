// Autogenerated from Pigeon (v0.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/services.dart';
import 'package:reference/reference.dart';

mixin Camera {}
class $CameraApi {
  /// Constructor for [$CameraApi]. The [binaryMessenger] named argument is
  /// available for dependency injection. If it is left null, the default
  /// [BinaryMessenger] will be used which routes to the host platform.
  $CameraApi({
      InstanceManager? instanceManager,
      ReferenceMessageCodec? messageCodec,
      BinaryMessenger? binaryMessenger,
      StandardMessageCodecConverter? instanceConverter,
    })  : instanceManager = instanceManager ?? InstanceManager(),
          _messageCodec = messageCodec ?? ReferenceMessageCodec(),
          _binaryMessenger = binaryMessenger,
          _instanceConverter =
              instanceConverter ?? StandardMessageCodecConverter();
          
  final InstanceManager instanceManager;
  final ReferenceMessageCodec _messageCodec;
  final BinaryMessenger? _binaryMessenger;
  final StandardMessageCodecConverter _instanceConverter;

  Future<void> $create(bool owner, Camera $instance) {
    if (instanceManager.containsInstance($instance)) {
      return Future<void>.value();
    }

    BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.Camera.\$create',
      _messageCodec,
      binaryMessenger: _binaryMessenger,
    );
    if (owner) {
      instanceManager.addWeakReference(
        instance: $instance,
        onFinalize: $onFinalize,
      );
    } else {
      instanceManager.addStrongReference(instance: $instance);
    }
    Map<Object?, Object?> args = _instanceConverter.convertInstances(
      instanceManager,
      <Object?, Object?>{
        'owner': !owner,
        'instanceId': instanceManager.getInstanceId($instance),
        'args': <Object?>[],
      },
    ) as Map<Object?, Object?>;
    return channel.send(args);
  }

  Future<void> $onFinalize(String instanceId) {
    BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.Camera.\$onFinalize',
      _messageCodec,
      binaryMessenger: _binaryMessenger,
    );
    return channel.send(instanceId);
  }

  Future<void> release(Camera? camera) async {
    BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.Camera.release', _messageCodec, binaryMessenger: _binaryMessenger,);
    final Map<Object?, Object?> args = _instanceConverter.convertInstances(
      instanceManager,
      <Object?, Object?>{'camera': camera},
    ) as Map<Object?, Object?>;       
    final Map<Object?, Object?>? replyMap =
        await channel.send(args) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> startPreview(Camera? camera) async {
    BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.Camera.startPreview', _messageCodec, binaryMessenger: _binaryMessenger,);
    final Map<Object?, Object?> args = _instanceConverter.convertInstances(
      instanceManager,
      <Object?, Object?>{'camera': camera},
    ) as Map<Object?, Object?>;       
    final Map<Object?, Object?>? replyMap =
        await channel.send(args) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> stopPreview(Camera? camera) async {
    BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.Camera.stopPreview', _messageCodec, binaryMessenger: _binaryMessenger,);
    final Map<Object?, Object?> args = _instanceConverter.convertInstances(
      instanceManager,
      <Object?, Object?>{'camera': camera},
    ) as Map<Object?, Object?>;       
    final Map<Object?, Object?>? replyMap =
        await channel.send(args) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> setDisplayOrientation(Camera? camera, int? degrees) async {
    BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.Camera.setDisplayOrientation', _messageCodec, binaryMessenger: _binaryMessenger,);
    final Map<Object?, Object?> args = _instanceConverter.convertInstances(
      instanceManager,
      <Object?, Object?>{'camera': camera, 'degrees': degrees},
    ) as Map<Object?, Object?>;       
    final Map<Object?, Object?>? replyMap =
        await channel.send(args) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<int?> attachPreviewTexture(Camera? camera) async {
    BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.Camera.attachPreviewTexture', _messageCodec, binaryMessenger: _binaryMessenger,);
    final Map<Object?, Object?> args = _instanceConverter.convertInstances(
      instanceManager,
      <Object?, Object?>{'camera': camera},
    ) as Map<Object?, Object?>;       
    final Map<Object?, Object?>? replyMap =
        await channel.send(args) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return _instanceConverter.convertPairedInstances(instanceManager, replyMap['result']) as int?;
    }
  }

  Future<void> releasePreviewTexture(Camera? camera) async {
    BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.Camera.releasePreviewTexture', _messageCodec, binaryMessenger: _binaryMessenger,);
    final Map<Object?, Object?> args = _instanceConverter.convertInstances(
      instanceManager,
      <Object?, Object?>{'camera': camera},
    ) as Map<Object?, Object?>;       
    final Map<Object?, Object?>? replyMap =
        await channel.send(args) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }
}
