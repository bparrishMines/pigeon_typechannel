// Autogenerated from Pigeon (v0.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.pigeon_typechannel;

import github.penguin.reference.method_channel.ReferenceMessageCodec;
import github.penguin.reference.reference.InstanceConverter;
import github.penguin.reference.reference.InstanceManager;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Messages {

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface Camera { }
  public interface $CameraApi {
    Camera $create();
    void release(Camera camera);
    void startPreview(Camera camera);
    void stopPreview(Camera camera);
    void setDisplayOrientation(Camera camera, int degrees);
    int attachPreviewTexture(Camera camera) throws Exception;
    void releasePreviewTexture(Camera camera) throws Exception;

    /** Sets up an instance of `CameraApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, InstanceManager instanceManager, ReferenceMessageCodec messageCodec, InstanceConverter.StandardInstanceConverter instanceConverter, $CameraApi api) {
      {
        BasicMessageChannel<Object> channel = new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Camera.$create", messageCodec);
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Map<Object, Object> messageMap = (Map<Object, Object>) instanceConverter.convertPairedInstances(instanceManager, message);

              //noinspection ConstantConditions
              Boolean owner = (Boolean) messageMap.get("owner");
              String instanceId = (String) messageMap.get("instanceId");
              List<Object> args = (List<Object>) messageMap.get("args");

              Camera instance = api.$create();
              //noinspection ConstantConditions
              if (owner) {
                instanceManager.addWeakReference(instance, instanceId);
              } else {
                instanceManager.addStrongReference(instance, instanceId);
              }
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Camera.$onFinalize", messageCodec);
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              instanceManager.removeInstance((String) message);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }

      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Camera.release", messageCodec);
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Map<Object, Object> args = (Map<Object, Object>)instanceConverter.convertPairedInstances(instanceManager, message);
              api.release((Camera) args.get("camera"));
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Camera.startPreview", messageCodec);
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Map<Object, Object> args = (Map<Object, Object>)instanceConverter.convertPairedInstances(instanceManager, message);
              api.startPreview((Camera) args.get("camera"));
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Camera.stopPreview", messageCodec);
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Map<Object, Object> args = (Map<Object, Object>)instanceConverter.convertPairedInstances(instanceManager, message);
              api.stopPreview((Camera) args.get("camera"));
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Camera.setDisplayOrientation", messageCodec);
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Map<Object, Object> args = (Map<Object, Object>)instanceConverter.convertPairedInstances(instanceManager, message);
              api.setDisplayOrientation((Camera) args.get("camera"), (int) args.get("degrees"));
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Camera.attachPreviewTexture", messageCodec);
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Map<Object, Object> args = (Map<Object, Object>)instanceConverter.convertPairedInstances(instanceManager, message);
              int result = api.attachPreviewTexture((Camera) args.get("camera"));
              wrapped.put("result", instanceConverter.convertInstances(instanceManager, result));
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Camera.releasePreviewTexture", messageCodec);
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Map<Object, Object> args = (Map<Object, Object>)instanceConverter.convertPairedInstances(instanceManager, message);
              api.releasePreviewTexture((Camera) args.get("camera"));
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", android.util.Log.getStackTraceString(exception));
    return errorMap;
  }
}
